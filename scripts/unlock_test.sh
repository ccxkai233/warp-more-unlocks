#!/usr/bin/env bash

# --- Unlock Test Functions Start ---

comprehensive_unlock_test() {
    # Text Formatting
    local Font_B="\033[1m"; local Font_Red="\033[31m"; local Font_Green="\033[32m"; local Font_Yellow="\033[33m"; local Font_Suffix="\033[0m"
    local Back_Green="\033[42m"; local Back_Red="\033[41m"; local Back_Yellow="\033[43m"; local Font_White="\033[37m"

    # Media Unlock Status
    local smedia_yes=" $Back_Green$Font_White Yes $Font_Suffix  "; local smedia_no=" $Back_Red$Font_White Block $Font_Suffix "; local smedia_bad="$Back_Red$Font_White Failed $Font_Suffix "
    local smedia_pending="$Back_Yellow$Font_White Pending $Font_Suffix"; local smedia_cn=" $Back_Red$Font_White China $Font_Suffix "; local smedia_noprem="$Back_Red$Font_White NoPrem. $Font_Suffix"
    local smedia_org="$Back_Yellow$Font_White NF.Only $Font_Suffix"; local smedia_web="$Back_Yellow$Font_White WebOnly $Font_Suffix"; local smedia_app="$Back_Yellow$Font_White APPOnly $Font_Suffix"
    local smedia_idc="  $Back_Yellow$Font_White IDC $Font_Suffix  "; local smedia_native="$Back_Green$Font_White Native $Font_Suffix "; local smedia_dns="$Back_Yellow$Font_White ViaDNS $Font_Suffix "
    local smedia_nodata="         "

    # Required variables
    local UA_Browser="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.87 Safari/537.36"
    local Media_Cookie; Media_Cookie=$(curl -sL --retry 3 --max-time 10 "https://raw.githubusercontent.com/xykt/IPQuality/main/ref/cookies.txt")

    # --- Helper Functions ---
    calc_ip_net(){ local ip_addr=$1; local subnet_mask=$2; local OLD_IFS="$IFS"; IFS='.'; ip_addr=($ip_addr); subnet_mask=($subnet_mask); IFS="$OLD_IFS"; local network_addr=""; for i in {0..3}; do local octet=$((${ip_addr[$i]} & ${subnet_mask[$i]})); if [ -z "$network_addr" ]; then network_addr="$octet"; else network_addr="$network_addr.$octet"; fi; done; echo "$network_addr"; }; Check_DNS_IP(){ if [ "$1" != "${1#*[0-9].[0-9]}" ];then if [ "$(calc_ip_net "$1" 255.0.0.0)" == "10.0.0.0" ];then echo 0; elif [ "$(calc_ip_net "$1" 255.240.0.0)" == "172.16.0.0" ];then echo 0; elif [ "$(calc_ip_net "$1" 255.255.0.0)" == "169.254.0.0" ];then echo 0; elif [ "$(calc_ip_net "$1" 255.255.0.0)" == "192.168.0.0" ];then echo 0; elif [ "$(calc_ip_net "$1" 255.255.255.0)" == "$(calc_ip_net "$2" 255.255.255.0)" ];then echo 0; else echo 1; fi; elif [ "$1" != "${1#*[0-9a-fA-F]:*}" ];then if [ "${1:0:3}" == "fe8" ];then echo 0; elif [ "${1:0:3}" == "FE8" ];then echo 0; elif [ "${1:0:2}" == "fc" ];then echo 0; elif [ "${1:0:2}" == "FC" ];then echo 0; elif [ "${1:0:2}" == "fd" ];then echo 0; elif [ "${1:0:2}" == "FD" ];then echo 0; elif [ "${1:0:2}" == "ff" ];then echo 0; elif [ "${1:0:2}" == "FF" ];then echo 0; else echo 1; fi; else echo 0; fi; }; Check_DNS_1(){ local resultdns=$(nslookup $1); local resultinlines=(${resultdns//$'\n'/ }); for i in ${resultinlines[*]};do if [[ $i == "Name:" ]];then local resultdnsindex=$((resultindex+3)); break; fi; local resultindex=$((resultindex+1)); done; echo $(Check_DNS_IP ${resultinlines[$resultdnsindex]} ${resultinlines[1]}); }; Check_DNS_2(){ local resultdnstext=$(dig $1|grep "ANSWER:"); local resultdnstext=${resultdnstext#*"ANSWER: "}; local resultdnstext=${resultdnstext%", AUTHORITY:"*}; if [ "$resultdnstext" == "0" ]||[ "$resultdnstext" == "1" ]||[ "$resultdnstext" == "2" ];then echo 0; else echo 1; fi; }; Check_DNS_3(){ local resultdnstext=$(dig "test$RANDOM$RANDOM.$1"|grep "ANSWER:"); echo "test$RANDOM$RANDOM.$1"; local resultdnstext=${resultdnstext#*"ANSWER: "}; local resultdnstext=${resultdnstext%", AUTHORITY:"*}; if [ "$resultdnstext" == "0" ];then echo 1; else echo 0; fi; }; Get_Unlock_Type(){ while [ $# -ne 0 ];do if [ "$1" = "0" ];then echo "${smedia_dns}"; return; fi; shift; done; echo "${smedia_native}"; }

    # --- Core Unlock Test Functions ---
    MediaUnlockTest_Netflix(){ local CurlARG="$1"; local ip_version="$2"; netflix=(); local result1=$(curl $CurlARG -$ip_version --user-agent "$UA_Browser" -fsL -X GET --max-time 10 "https://www.netflix.com/title/81280792" 2>&1); local result2=$(curl $CurlARG -$ip_version --user-agent "$UA_Browser" -fsL -X GET --max-time 10 "https://www.netflix.com/title/70143836" 2>&1); if [ -z "$result1" ]||[ -z "$result2" ];then netflix[ustatus]="${smedia_bad}"; return; fi; local region=$(echo "$result1"|grep -o 'data-country="[A-Z]*"'|sed 's/.*="\([A-Z]*\)"/\1/'|head -n1); [[ -z $region ]]&&region=$(echo "$result2"|grep -o 'data-country="[A-Z]*"'|sed 's/.*="\([A-Z]*\)"/\1/'|head -n1); result1=$(echo $result1|grep 'Oh no!'); result2=$(echo $result2|grep 'Oh no!'); if [ -n "$result1" ]&&[ -n "$result2" ];then netflix[ustatus]="${smedia_org}"; elif [ -z "$result1" ]||[ -z "$result2" ];then netflix[ustatus]="${smedia_yes}"; else netflix[ustatus]="${smedia_no}"; fi; }
    MediaUnlockTest_DisneyPlus(){ local CurlARG="$1"; local ip_version="$2"; disney=(); local PreAssertion=$(curl $CurlARG -$ip_version --user-agent "$UA_Browser" -s --max-time 10 -X POST "https://disney.api.edge.bamgrid.com/devices" -H "authorization: Bearer ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84" -H "content-type: application/json; charset=UTF-8" -d '{"deviceFamily":"browser","applicationRuntime":"chrome","deviceProfile":"windows","attributes":{}}' 2>&1); if [[ $PreAssertion == "curl"* ]] || ! (echo "$PreAssertion"|jq . >/dev/null 2>&1); then disney[ustatus]="${smedia_bad}"; return; fi; local assertion=$(echo $PreAssertion|jq -r '.assertion'); local PreDisneyCookie=$(echo "$Media_Cookie"|sed -n '1p'); local disneycookie=$(echo $PreDisneyCookie|sed "s/DISNEYASSERTION/$assertion/g"); local TokenContent=$(curl $CurlARG -$ip_version --user-agent "$UA_Browser" -s --max-time 10 -X POST "https://disney.api.edge.bamgrid.com/token" -H "authorization: Bearer ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84" -d "$disneycookie" 2>&1); local isBanned=$(echo $TokenContent|jq -r 'select(.error_description == "forbidden-location") | .error_description'); local is403=$(echo $TokenContent|grep '403 ERROR'); if [ -n "$isBanned" ]||[ -n "$is403" ]; then disney[ustatus]="${smedia_no}"; return; fi; local fakecontent=$(echo "$Media_Cookie"|sed -n '8p'); local refreshToken=$(echo $TokenContent|jq -r '.refresh_token'); local disneycontent=$(echo $fakecontent|sed "s/ILOVEDISNEY/$refreshToken/g"); local tmpresult=$(curl $CurlARG -$ip_version --user-agent "$UA_Browser" -X POST -sSL --max-time 10 "https://disney.api.edge.bamgrid.com/graph/v1/device/graphql" -H "authorization: ZGlzbmV5JmJyb3dzZXImMS4wLjA.Cu56AgSfBTDag5NiRA81oLHkDZfu5L3CKadnefEAY84" -d "$disneycontent" 2>&1); if ! (echo "$tmpresult"|jq . >/dev/null 2>&1); then disney[ustatus]="${smedia_bad}"; return; fi; local region=$(echo $tmpresult|jq -r '.extensions.sdk.session.location.countryCode'); local inSupportedLocation=$(echo $tmpresult|jq -r '.extensions.sdk.session.inSupportedLocation'); if [ -n "$region" ]&&[[ $inSupportedLocation == "true" ]]; then disney[ustatus]="${smedia_yes}"; else disney[ustatus]="${smedia_no}"; fi; }
    OpenAITest(){ local CurlARG="$1"; local ip_version="$2"; chatgpt=(); local tmpresult1=$(curl $CurlARG -$ip_version -sS --max-time 10 'https://api.openai.com/compliance/cookie_requirements' -H 'authority: api.openai.com' -H 'accept: */*' -H 'accept-language: zh-CN,zh;q=0.9' -H 'authorization: Bearer null' -H 'content-type: application/json' -H 'origin: https://platform.openai.com' -H 'referer: https://platform.openai.com/' -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0' 2>&1); local tmpresult2=$(curl $CurlARG -$ip_version -sS --max-time 10 'https://ios.chat.openai.com/' -H 'user-agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36 Edg/119.0.0.0' 2>&1); local result1=$(echo $tmpresult1|grep unsupported_country); local result2=$(echo $tmpresult2|grep VPN); if [ -z "$result2" ]&&[ -z "$result1" ]&&[[ $tmpresult1 != "curl"* ]]&&[[ $tmpresult2 != "curl"* ]]; then chatgpt[ustatus]="${smedia_yes}"; elif [ -n "$result2" ]&&[ -n "$result1" ]; then chatgpt[ustatus]="${smedia_no}"; elif [ -z "$result1" ]&&[ -n "$result2" ]&&[[ $tmpresult1 != "curl"* ]]; then chatgpt[ustatus]="${smedia_web}"; elif [ -n "$result1" ]&&[ -z "$result2" ]; then chatgpt[ustatus]="${smedia_app}"; else chatgpt[ustatus]="${smedia_bad}"; fi; }
    MediaUnlockTest_YouTube_Premium(){ local CurlARG="$1"; local ip_version="$2"; youtube=(); local tmpresult=$(curl $CurlARG -$ip_version --max-time 10 -sSL -H "Accept-Language: en" "https://www.youtube.com/premium" 2>&1); if [[ $tmpresult == "curl"* ]]; then youtube[ustatus]="${smedia_bad}"; return; fi; local isNotAvailable=$(echo $tmpresult|grep 'Premium is not available in your country'); if [ -n "$isNotAvailable" ]; then youtube[ustatus]="${smedia_noprem}"; else youtube[ustatus]="${smedia_yes}"; fi; }
    MediaUnlockTest_PrimeVideo_Region(){ local CurlARG="$1"; local ip_version="$2"; amazon=(); local tmpresult=$(curl $CurlARG -$ip_version --user-agent "$UA_Browser" -sL --max-time 10 "https://www.primevideo.com" 2>&1); if [[ $tmpresult == "curl"* ]]; then amazon[ustatus]="${smedia_bad}"; return; fi; local result=$(echo $tmpresult|grep '"currentTerritory":'|sed 's/.*currentTerritory//'|cut -f3 -d'"'|head -n 1); if [ -n "$result" ]; then amazon[ustatus]="${smedia_yes}"; else amazon[ustatus]="${smedia_no}"; fi; }
    MediaUnlockTest_Spotify(){ local CurlARG="$1"; local ip_version="$2"; spotify=(); local tmpresult=$(curl $CurlARG -$ip_version --user-agent "$UA_Browser" -s --max-time 10 -X POST "https://spclient.wg.spotify.com/signup/public/v1/account" -d "birth_day=11&birth_month=11&birth_year=2000&collect_personal_info=undefined&creation_flow=&creation_point=https%3A%2F%2Fwww.spotify.com%2Fhk-en%2F&displayname=Gay%20Lord&gender=male&iagree=1&key=a1e486e2729f46d6bb368d6b2bcda326&platform=www&referrer=&send-email=0&thirdpartyemail=0&identifier_token=AgE6YTvEzkReHNfJpO114514" -H "Accept-Language: en" 2>&1); if echo "$tmpresult"|jq . >/dev/null 2>&1; then local isLaunched=$(echo $tmpresult|jq -r '.is_country_launched'); local StatusCode=$(echo $tmpresult|jq -r '.status'); if [ "$StatusCode" = "311" ]&&[ "$isLaunched" = "true" ]; then spotify[ustatus]="${smedia_yes}"; else spotify[ustatus]="${smedia_no}"; fi; else spotify[ustatus]="${smedia_bad}"; fi; }

    # --- Main Logic ---
    local PROXY_ARG=""; [ -n "$1" ] && PROXY_ARG="--proxy socks5h://127.0.0.1:$1"
    local IP_VERSION="$2"; local TESTS_TO_RUN=($3)
    echo -e " ${Font_B}--- Comprehensive Unlock Test ---${Font_Suffix}"
    for test_item in "${TESTS_TO_RUN[@]}"; do
        case "$test_item" in
            "Netflix") MediaUnlockTest_Netflix "$PROXY_ARG" "$IP_VERSION"; echo -e " Netflix:\t${netflix[ustatus]}";;
            "Disney+") MediaUnlockTest_DisneyPlus "$PROXY_ARG" "$IP_VERSION"; echo -e " Disney+:\t${disney[ustatus]}";;
            "ChatGPT") OpenAITest "$PROXY_ARG" "$IP_VERSION"; echo -e " ChatGPT:\t${chatgpt[ustatus]}";;
            "YouTube") MediaUnlockTest_YouTube_Premium "$PROXY_ARG" "$IP_VERSION"; echo -e " YouTube Premium:\t${youtube[ustatus]}";;
            "Amazon") MediaUnlockTest_PrimeVideo_Region "$PROXY_ARG" "$IP_VERSION"; echo -e " Amazon Prime:\t${amazon[ustatus]}";;
            "Spotify") MediaUnlockTest_Spotify "$PROXY_ARG" "$IP_VERSION"; echo -e " Spotify:\t${spotify[ustatus]}";;
        esac
    done
    all_passed=true
    hard_failure=false
    for test_item in "${TESTS_TO_RUN[@]}"; do
        local var_name="${test_item,,}"; var_name=${var_name//+/}; local status_var_ref="${var_name}[ustatus]"
        if [[ "${!status_var_ref}" =~ "Block" || "${!status_var_ref}" =~ "NoPrem" || "${!status_var_ref}" =~ "NF.Only" ]]; then
            all_passed=false
            hard_failure=true
            break
        elif [[ "${!status_var_ref}" != *Yes* ]]; then
            all_passed=false
        fi
    done
    echo -e " ${Font_B}--- Test Finished ---${Font_Suffix}"
}

# --- Unlock Test Functions End ---